# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-win:
    runs-on: "windows-latest"

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: 3.13
          
      - name: Install dependencies
        run: |
          python -m pip install pyinstaller
          pip install -r requirements.txt
  
          
      - name: run pyinstaller for device
        id: create_device
        run: |
          cp ./device/config.py ./front
          cp ./device/config.toml ./front
          cp ./device/log.py ./front
          pyinstaller --name="seestar_alp" --hidden-import tzlocal --hidden-import geocoder --hidden-import alpaca.telescope --hidden-import log --hidden-import toml `
          --add-data="front/config.toml;." --add-data="front/config.py;." `
          --add-data="front/citation;astroquery" --add-data="front/templates;templates" --add-data="front/public;public" `
          --add-data="front;front" --add-data="device;device" root_app.py
          Compress-Archive -Path ./dist/seestar_alp/* -DestinationPath win_seestar_alp.zip
          echo "device_script_result=win_seestar_alp.zip" >> $env:GITHUB_ENV
        shell: pwsh  
  
      - name: Display Result
        run: echo "The script result is ${{ env.device_script_result }}"
        shell: pwsh
        
      - name: Upload Result as Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.device_script_result }}
          asset_name: ${{ env.device_script_result }}
          asset_content_type: application/zip

